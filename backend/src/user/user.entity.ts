import {
  BeforeInsert,
  BeforeUpdate,
  Column,
  Entity,
  ObjectIdColumn,
} from 'typeorm';
import { IsEmail } from 'class-validator';
import * as argon2 from 'argon2';
import { Binary, ObjectId } from 'mongodb';
import { ApiProperty } from '@nestjs/swagger';

@Entity('user')
export class UserEntity {
  @ApiProperty({
    description:
      'Unique identifier of the user, automatically generated by the database',
    example: '650c59a88f1e78c88102d1a4',
  })
  @ObjectIdColumn() // Maps to MongoDB's _id field
  _id: ObjectId;

  @ApiProperty({ description: 'Unique username of the user', example: 'user' })
  @Column({ unique: true })
  username: string;

  @ApiProperty({
    description: 'Email of the user',
    example: 'user@example.com',
  })
  @Column({ unique: true })
  @IsEmail()
  email: string;

  @ApiProperty({ description: 'First name of the user', example: 'Mike' })
  @Column()
  firstName: string;

  @ApiProperty({ description: 'Last name of the user', example: 'Ross' })
  @Column()
  lastName: string;

  @ApiProperty({
    description: 'Profile image stored as binary data',
  })
  @Column()
  image: Binary;

  @ApiProperty({ description: 'Hashed password of the user', writeOnly: true })
  @Column()
  password: string;

  @ApiProperty({
    description: 'Security question for password recovery',
    example: 'What was the name of your first pet?',
  })
  @Column()
  securityQuestion: string;

  @ApiProperty({
    description: 'Hashed answer to the security question',
  })
  @Column()
  securityAnswer: string;

  @ApiProperty({
    description: 'Token used for password reset verification',
    example: 'c02d1e8a-7861-4f0c-93f3-ff63b40eb6e8',
    writeOnly: true,
  })
  @Column()
  passwordResetToken: string;

  @ApiProperty({
    description: 'Expiration date and time for the password reset token',
    example: '2024-09-30T18:30:00Z',
    writeOnly: true,
  })
  @Column()
  passwordResetTokenExpiry: Date;

  // Nested object for API tokens
  @ApiProperty({
    description: 'API tokens for external services',
    type: 'object',
    example: {
      defaultModel: 'GEMINI',
      geminiKey: 'encrypted_key',
      openaiKey: 'encrypted_key',
    },
  })
  @Column({ type: 'json', nullable: true }) // Store as a JSON object
  apiToken?: {
    defaultModel: string;
    geminiKey: string;
    openaiKey: string;
  };

  // Hash the password before inserting it into the database
  @BeforeInsert()
  async hashPasswordBeforeInsert() {
    this.password = await argon2.hash(this.password);
  }

  // Hash the password before updating the user, but only if it's different
  @BeforeUpdate()
  async hashPasswordBeforeUpdate() {
    const isPasswordHashed = this.password.startsWith('$argon2');
    if (!isPasswordHashed) {
      this.password = await argon2.hash(this.password);
    }
  }

  // Hash the security answer before inserting it into the database
  @BeforeInsert()
  async hashSecurityAnswerBeforeInsert() {
    this.securityAnswer = await argon2.hash(this.securityAnswer.toLowerCase());
  }

  // Hash the security answer before updating the user, but only if it's different
  @BeforeUpdate()
  async hashSecurityAnswerBeforeUpdate() {
    const isSecurityAnswerHashed = this.securityAnswer.startsWith('$argon2');
    if (!isSecurityAnswerHashed) {
      this.securityAnswer = await argon2.hash(
        this.securityAnswer.toLowerCase(),
      );
    }
  }

  // Hash the API keys before inserting into the database
  @BeforeInsert()
  async hashApiTokensBeforeInsert() {
    if (this.apiToken) {
      if (this.apiToken.geminiKey) {
        this.apiToken.geminiKey = await argon2.hash(this.apiToken.geminiKey);
      }
      if (this.apiToken.openaiKey) {
        this.apiToken.openaiKey = await argon2.hash(this.apiToken.openaiKey);
      }
    }
  }

  // Hash the API keys before updating the user, but only if they're different
  @BeforeUpdate()
  async hashApiTokensBeforeUpdate() {
    if (this.apiToken) {
      if (
        this.apiToken.geminiKey &&
        !this.apiToken.geminiKey.startsWith('$argon2')
      ) {
        this.apiToken.geminiKey = await argon2.hash(this.apiToken.geminiKey);
      }
      if (
        this.apiToken.openaiKey &&
        !this.apiToken.openaiKey.startsWith('$argon2')
      ) {
        this.apiToken.openaiKey = await argon2.hash(this.apiToken.openaiKey);
      }
    }
  }
}
